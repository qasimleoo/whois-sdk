# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class ApiSubscription(UniversalBaseModel):
    subscription_status: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="subscriptionStatus")
    ] = None
    request_limit: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="requestLimit")] = None
    served_requests: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="servedRequests")] = None
    surcharge_request_limit: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="surchargeRequestLimit")
    ] = None
    served_surcharge_requests: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="servedSurchargeRequests")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
