# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawDnsClient, RawDnsClient
from .types.dns_live_response import DnsLiveResponse


class DnsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDnsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDnsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDnsClient
        """
        return self._raw_client

    def live_dns_lookup(
        self,
        *,
        api_key: str,
        domain_name: typing.Optional[str] = None,
        ip_address: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DnsLiveResponse:
        """
        Get Live DNS information for a domain or an IP address

        Parameters
        ----------
        api_key : str

        domain_name : typing.Optional[str]

        ip_address : typing.Optional[str]

        type : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DnsLiveResponse

        Examples
        --------
        from whoisfreaks import WhoisfreaksApi
        from whoisfreaks.environment import WhoisfreaksApiEnvironment
        client = WhoisfreaksApi(environment=WhoisfreaksApiEnvironment.PRODUCTION, )
        client.dns.live_dns_lookup(api_key='YOUR_API_KEY', domain_name='google.com', type='all', )
        """
        _response = self._raw_client.live_dns_lookup(
            api_key=api_key, domain_name=domain_name, ip_address=ip_address, type=type, request_options=request_options
        )
        return _response.data


class AsyncDnsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDnsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDnsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDnsClient
        """
        return self._raw_client

    async def live_dns_lookup(
        self,
        *,
        api_key: str,
        domain_name: typing.Optional[str] = None,
        ip_address: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DnsLiveResponse:
        """
        Get Live DNS information for a domain or an IP address

        Parameters
        ----------
        api_key : str

        domain_name : typing.Optional[str]

        ip_address : typing.Optional[str]

        type : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DnsLiveResponse

        Examples
        --------
        from whoisfreaks import AsyncWhoisfreaksApi
        from whoisfreaks.environment import WhoisfreaksApiEnvironment
        import asyncio
        client = AsyncWhoisfreaksApi(environment=WhoisfreaksApiEnvironment.PRODUCTION, )
        async def main() -> None:
            await client.dns.live_dns_lookup(api_key='YOUR_API_KEY', domain_name='google.com', type='all', )
        asyncio.run(main())
        """
        _response = await self._raw_client.live_dns_lookup(
            api_key=api_key, domain_name=domain_name, ip_address=ip_address, type=type, request_options=request_options
        )
        return _response.data
