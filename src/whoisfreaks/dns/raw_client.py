# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from .types.dns_live_response import DnsLiveResponse


class RawDnsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def live_dns_lookup(
        self,
        *,
        api_key: str,
        domain_name: typing.Optional[str] = None,
        ip_address: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[DnsLiveResponse]:
        """
        Get Live DNS information for a domain or an IP address

        Parameters
        ----------
        api_key : str

        domain_name : typing.Optional[str]

        ip_address : typing.Optional[str]

        type : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DnsLiveResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2.0/dns/live",
            method="GET",
            params={
                "apiKey": api_key,
                "domainName": domain_name,
                "ipAddress": ip_address,
                "type": type,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                DnsLiveResponse,
                parse_obj_as(
                    type_=DnsLiveResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)


class AsyncRawDnsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def live_dns_lookup(
        self,
        *,
        api_key: str,
        domain_name: typing.Optional[str] = None,
        ip_address: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[DnsLiveResponse]:
        """
        Get Live DNS information for a domain or an IP address

        Parameters
        ----------
        api_key : str

        domain_name : typing.Optional[str]

        ip_address : typing.Optional[str]

        type : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DnsLiveResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2.0/dns/live",
            method="GET",
            params={
                "apiKey": api_key,
                "domainName": domain_name,
                "ipAddress": ip_address,
                "type": type,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                DnsLiveResponse,
                parse_obj_as(
                    type_=DnsLiveResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)
