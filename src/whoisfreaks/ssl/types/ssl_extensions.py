# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .authority_info_access import AuthorityInfoAccess
from .certificate_policy import CertificatePolicy
from .subject_alternative_names import SubjectAlternativeNames


class SslExtensions(UniversalBaseModel):
    authority_key_identifier: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="authorityKeyIdentifier")
    ] = None
    subject_key_identifier: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="subjectKeyIdentifier")
    ] = None
    key_usages: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="keyUsages")] = None
    extended_key_usages: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="extendedKeyUsages")
    ] = None
    authority_info_access: typing_extensions.Annotated[
        typing.Optional[AuthorityInfoAccess], FieldMetadata(alias="authorityInfoAccess")
    ] = None
    subject_alternative_names: typing_extensions.Annotated[
        typing.Optional[SubjectAlternativeNames], FieldMetadata(alias="subjectAlternativeNames")
    ] = None
    certificate_policies: typing_extensions.Annotated[
        typing.Optional[typing.List[CertificatePolicy]], FieldMetadata(alias="certificatePolicies")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
