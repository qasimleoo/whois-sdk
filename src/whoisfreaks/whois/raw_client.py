# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from .types.asn_whois_response import AsnWhoisResponse
from .types.bulk_whois_response import BulkWhoisResponse
from .types.ip_whois_response import IpWhoisResponse
from .types.whois_response import WhoisResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawWhoisClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_live_whois(
        self, *, api_key: str, domain_name: str, whois: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[WhoisResponse]:
        """
        Get live WHOIS information for a domain

        Parameters
        ----------
        api_key : str

        domain_name : str

        whois : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[WhoisResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "whois",
            method="GET",
            params={
                "apiKey": api_key,
                "domainName": domain_name,
                "whois": whois,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                WhoisResponse,
                parse_obj_as(
                    type_=WhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get_historical_whois(
        self,
        *,
        api_key: str,
        domain_name: str,
        whois: str,
        page: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[WhoisResponse]:
        """
        Get historical WHOIS records for a domain

        Parameters
        ----------
        api_key : str

        domain_name : str

        whois : str

        page : typing.Optional[str]

        format : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[WhoisResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "whois",
            method="GET",
            params={
                "apiKey": api_key,
                "domainName": domain_name,
                "whois": whois,
                "page": page,
                "format": format,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                WhoisResponse,
                parse_obj_as(
                    type_=WhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get_reverse_whois(
        self,
        *,
        api_key: str,
        whois: str,
        keyword: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        owner: typing.Optional[str] = None,
        company: typing.Optional[str] = None,
        mode: typing.Optional[str] = None,
        exact: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        includes: typing.Optional[str] = None,
        page: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[WhoisResponse]:
        """
        Perform a reverse WHOIS lookup based on registrant information

        Parameters
        ----------
        api_key : str

        whois : str

        keyword : typing.Optional[str]

        email : typing.Optional[str]

        owner : typing.Optional[str]

        company : typing.Optional[str]

        mode : typing.Optional[str]

        exact : typing.Optional[str]

        format : typing.Optional[str]

        includes : typing.Optional[str]

        page : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[WhoisResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "whois",
            method="GET",
            params={
                "apiKey": api_key,
                "whois": whois,
                "keyword": keyword,
                "email": email,
                "owner": owner,
                "company": company,
                "mode": mode,
                "exact": exact,
                "format": format,
                "includes": includes,
                "page": page,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                WhoisResponse,
                parse_obj_as(
                    type_=WhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get_ip_whois(
        self,
        *,
        api_key: str,
        ip: str,
        format: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[IpWhoisResponse]:
        """
        Get WHOIS information for an IP

        Parameters
        ----------
        api_key : str

        ip : str

        format : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[IpWhoisResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "ip-whois",
            method="GET",
            params={
                "apiKey": api_key,
                "ip": ip,
                "format": format,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                IpWhoisResponse,
                parse_obj_as(
                    type_=IpWhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get_asn_whois(
        self,
        *,
        api_key: str,
        asn: str,
        format: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[AsnWhoisResponse]:
        """
        Get WHOIS information for an ASN

        Parameters
        ----------
        api_key : str

        asn : str

        format : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[AsnWhoisResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "asn-whois",
            method="GET",
            params={
                "apiKey": api_key,
                "asn": asn,
                "format": format,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                AsnWhoisResponse,
                parse_obj_as(
                    type_=AsnWhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get_bulk_whois(
        self,
        *,
        api_key: str,
        domain_names: typing.Sequence[str],
        format: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BulkWhoisResponse]:
        """
        Get Live WHOIS information for more than one domain names

        Parameters
        ----------
        api_key : str

        domain_names : typing.Sequence[str]

        format : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BulkWhoisResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "bulkwhois",
            method="POST",
            params={
                "apiKey": api_key,
                "format": format,
            },
            json={
                "domainNames": domain_names,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                BulkWhoisResponse,
                parse_obj_as(
                    type_=BulkWhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)


class AsyncRawWhoisClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_live_whois(
        self, *, api_key: str, domain_name: str, whois: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[WhoisResponse]:
        """
        Get live WHOIS information for a domain

        Parameters
        ----------
        api_key : str

        domain_name : str

        whois : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[WhoisResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "whois",
            method="GET",
            params={
                "apiKey": api_key,
                "domainName": domain_name,
                "whois": whois,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                WhoisResponse,
                parse_obj_as(
                    type_=WhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get_historical_whois(
        self,
        *,
        api_key: str,
        domain_name: str,
        whois: str,
        page: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[WhoisResponse]:
        """
        Get historical WHOIS records for a domain

        Parameters
        ----------
        api_key : str

        domain_name : str

        whois : str

        page : typing.Optional[str]

        format : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[WhoisResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "whois",
            method="GET",
            params={
                "apiKey": api_key,
                "domainName": domain_name,
                "whois": whois,
                "page": page,
                "format": format,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                WhoisResponse,
                parse_obj_as(
                    type_=WhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get_reverse_whois(
        self,
        *,
        api_key: str,
        whois: str,
        keyword: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        owner: typing.Optional[str] = None,
        company: typing.Optional[str] = None,
        mode: typing.Optional[str] = None,
        exact: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        includes: typing.Optional[str] = None,
        page: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[WhoisResponse]:
        """
        Perform a reverse WHOIS lookup based on registrant information

        Parameters
        ----------
        api_key : str

        whois : str

        keyword : typing.Optional[str]

        email : typing.Optional[str]

        owner : typing.Optional[str]

        company : typing.Optional[str]

        mode : typing.Optional[str]

        exact : typing.Optional[str]

        format : typing.Optional[str]

        includes : typing.Optional[str]

        page : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[WhoisResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "whois",
            method="GET",
            params={
                "apiKey": api_key,
                "whois": whois,
                "keyword": keyword,
                "email": email,
                "owner": owner,
                "company": company,
                "mode": mode,
                "exact": exact,
                "format": format,
                "includes": includes,
                "page": page,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                WhoisResponse,
                parse_obj_as(
                    type_=WhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get_ip_whois(
        self,
        *,
        api_key: str,
        ip: str,
        format: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[IpWhoisResponse]:
        """
        Get WHOIS information for an IP

        Parameters
        ----------
        api_key : str

        ip : str

        format : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[IpWhoisResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "ip-whois",
            method="GET",
            params={
                "apiKey": api_key,
                "ip": ip,
                "format": format,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                IpWhoisResponse,
                parse_obj_as(
                    type_=IpWhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get_asn_whois(
        self,
        *,
        api_key: str,
        asn: str,
        format: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[AsnWhoisResponse]:
        """
        Get WHOIS information for an ASN

        Parameters
        ----------
        api_key : str

        asn : str

        format : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[AsnWhoisResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "asn-whois",
            method="GET",
            params={
                "apiKey": api_key,
                "asn": asn,
                "format": format,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                AsnWhoisResponse,
                parse_obj_as(
                    type_=AsnWhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get_bulk_whois(
        self,
        *,
        api_key: str,
        domain_names: typing.Sequence[str],
        format: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BulkWhoisResponse]:
        """
        Get Live WHOIS information for more than one domain names

        Parameters
        ----------
        api_key : str

        domain_names : typing.Sequence[str]

        format : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BulkWhoisResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "bulkwhois",
            method="POST",
            params={
                "apiKey": api_key,
                "format": format,
            },
            json={
                "domainNames": domain_names,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                BulkWhoisResponse,
                parse_obj_as(
                    type_=BulkWhoisResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)
